# ==============================================
# NEURALCONTENT API - CI/CD PIPELINE
# ==============================================
# GitHub Actions workflow for automated testing and deployment
# Enhanced for PASSO 3.3 - Production Ready CI/CD

name: 🚀 NeuralContent API CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/neuralcontent-api

jobs:
  # ==============================================
  # QUALITY ASSURANCE JOB
  # ==============================================
  quality-assurance:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🧹 Lint Code
      run: npm run lint
      
    - name: 🔎 Type Check
      run: npm run typecheck
      
    - name: 🧪 Run Unit Tests
      run: npm run test:unit
      
    - name: 📊 Run Coverage
      run: npm run test:cov
      
    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  # ==============================================
  # SECURITY AUDIT JOB
  # ==============================================
  security-audit:
    name: 🛡️ Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔒 Run Security Audit
      run: npm run security:audit
      
    - name: 🕵️ Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ==============================================
  # BUILD JOB
  # ==============================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-audit]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🏗️ Build Production
      run: npm run build:prod
      
    - name: 📄 Generate Documentation
      run: npm run docs:generate
      
    - name: 💾 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          docs/
          package.json
          package-lock.json
        retention-days: 30

  # ==============================================
  # INTEGRATION TESTS JOB
  # ==============================================
  integration-tests:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 💾 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: 🔧 Setup Test Environment
      run: |
        cp .env.example .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_PORT=3306" >> .env.test
        echo "DB_USERNAME=test_user" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test
        echo "DB_NAME=test_db" >> .env.test
        echo "REDIS_HOST=127.0.0.1" >> .env.test
        echo "REDIS_PORT=6379" >> .env.test
        
    - name: 🗃️ Run Database Migrations
      run: npm run db:migrate
      env:
        NODE_ENV: test
        
    - name: 🧪 Run Integration Tests
      run: npm run test:e2e
      env:
        NODE_ENV: test

  # ==============================================
  # DOCKER BUILD JOB
  # ==============================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ==============================================
  # PRODUCTION DEPLOYMENT JOB
  # ==============================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: 🚀 Deploy to Production Server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /var/www/neuralcontent-api
          git pull origin main
          npm ci --only=production
          npm run build:prod
          npm run db:migrate
          pm2 restart ecosystem.config.js --env production
          npm run health:prod
        EOF
        
    - name: 🏥 Health Check
      run: |
        sleep 30
        curl -f https://api.neuralbook.app/v1/health || exit 1
        
    - name: 📧 Notify Deployment Success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 NeuralContent API deployed successfully to production!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: success()
        
    - name: 📧 Notify Deployment Failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ NeuralContent API deployment to production failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: failure()

  # ==============================================
  # STAGING DEPLOYMENT JOB
  # ==============================================
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment steps here
        
    - name: 🏥 Staging Health Check
      run: |
        sleep 30
        curl -f https://staging-api.neuralbook.app/v1/health || exit 1
