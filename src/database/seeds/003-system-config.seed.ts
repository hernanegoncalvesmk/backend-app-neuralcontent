import { DataSource } from 'typeorm';

/**
 * Seed: Configura√ß√µes Padr√£o do Sistema
 * 
 * @description Cria as configura√ß√µes iniciais obrigat√≥rias do NeuralContent usando SQL direto
 * para compatibilidade total com as migrations:
 * - Configura√ß√µes de API
 * - Configura√ß√µes de limites
 * - Configura√ß√µes de features
 * - Configura√ß√µes de sistema
 * 
 * @author NeuralContent Team - Arquiteto Senior
 * @since 1.0.0
 */
export class SystemConfigSeed {
  public async run(dataSource: DataSource): Promise<void> {
    console.log('üå± Executando seed: Configura√ß√µes do Sistema...');

    // Verificar se j√° existem configura√ß√µes
    const existingConfigs = await dataSource.query('SELECT COUNT(*) as count FROM sys_configs');
    if (existingConfigs[0].count > 0) {
      console.log('‚ÑπÔ∏è Configura√ß√µes j√° existem no banco. Pulando seed...');
      return;
    }

    try {
      // Configura√ß√µes padr√£o do sistema
      const configsToInsert = [
        // === CONFIGURA√á√ïES DE API ===
        {
          key: 'openai_api_enabled',
          category: 'api',
          name: 'OpenAI API Habilitada',
          description: 'Controla se a integra√ß√£o com OpenAI est√° ativa',
          value: 'true',
          type: 'boolean',
          isPublic: false,
          isRequired: true,
          sortOrder: 1,
          metadata: JSON.stringify({
            group: 'ai_providers',
            icon: 'brain',
            validation: { type: 'boolean' }
          })
        },
        {
          key: 'openai_default_model',
          category: 'api',
          name: 'Modelo Padr√£o OpenAI',
          description: 'Modelo padr√£o para gera√ß√£o de texto',
          value: 'gpt-3.5-turbo',
          type: 'string',
          isPublic: false,
          isRequired: true,
          sortOrder: 2,
          metadata: JSON.stringify({
            group: 'ai_providers',
            icon: 'settings',
            validation: { type: 'string', enum: ['gpt-3.5-turbo', 'gpt-4', 'gpt-4-turbo'] }
          })
        },

        // === CONFIGURA√á√ïES DE CR√âDITOS ===
        {
          key: 'credit_cost_text_generation',
          category: 'credits',
          name: 'Custo - Gera√ß√£o de Texto',
          description: 'Cr√©ditos consumidos por gera√ß√£o de texto',
          value: '1',
          type: 'number',
          isPublic: true,
          isRequired: true,
          sortOrder: 10,
          metadata: JSON.stringify({
            group: 'costs',
            icon: 'credit-card',
            validation: { type: 'number', min: 1 }
          })
        },
        {
          key: 'credit_cost_image_generation',
          category: 'credits',
          name: 'Custo - Gera√ß√£o de Imagem',
          description: 'Cr√©ditos consumidos por gera√ß√£o de imagem',
          value: '5',
          type: 'number',
          isPublic: true,
          isRequired: true,
          sortOrder: 11,
          metadata: JSON.stringify({
            group: 'costs',
            icon: 'image',
            validation: { type: 'number', min: 1 }
          })
        },
        {
          key: 'credit_cost_translation',
          category: 'credits',
          name: 'Custo - Tradu√ß√£o',
          description: 'Cr√©ditos consumidos por tradu√ß√£o de documento',
          value: '2',
          type: 'number',
          isPublic: true,
          isRequired: true,
          sortOrder: 12,
          metadata: JSON.stringify({
            group: 'costs',
            icon: 'globe',
            validation: { type: 'number', min: 1 }
          })
        },

        // === CONFIGURA√á√ïES DE LIMITES ===
        {
          key: 'max_file_size_mb',
          category: 'limits',
          name: 'Tamanho M√°ximo de Arquivo',
          description: 'Tamanho m√°ximo de arquivo em MB',
          value: '10',
          type: 'number',
          isPublic: true,
          isRequired: true,
          sortOrder: 20,
          metadata: JSON.stringify({
            group: 'upload_limits',
            icon: 'upload',
            validation: { type: 'number', min: 1, max: 100 }
          })
        },
        {
          key: 'max_text_length',
          category: 'limits',
          name: 'Comprimento M√°ximo de Texto',
          description: 'N√∫mero m√°ximo de caracteres para gera√ß√£o de texto',
          value: '4000',
          type: 'number',
          isPublic: true,
          isRequired: true,
          sortOrder: 21,
          metadata: JSON.stringify({
            group: 'content_limits',
            icon: 'edit',
            validation: { type: 'number', min: 100, max: 10000 }
          })
        },

        // === CONFIGURA√á√ïES DE FEATURES ===
        {
          key: 'feature_image_generation_enabled',
          category: 'features',
          name: 'Gera√ß√£o de Imagem Habilitada',
          description: 'Controla se a feature de gera√ß√£o de imagem est√° ativa',
          value: 'true',
          type: 'boolean',
          isPublic: true,
          isRequired: true,
          sortOrder: 30,
          metadata: JSON.stringify({
            group: 'ai_features',
            icon: 'image',
            validation: { type: 'boolean' }
          })
        },
        {
          key: 'feature_translation_enabled',
          category: 'features',
          name: 'Tradu√ß√£o Habilitada',
          description: 'Controla se a feature de tradu√ß√£o est√° ativa',
          value: 'true',
          type: 'boolean',
          isPublic: true,
          isRequired: true,
          sortOrder: 31,
          metadata: JSON.stringify({
            group: 'ai_features',
            icon: 'globe',
            validation: { type: 'boolean' }
          })
        },

        // === CONFIGURA√á√ïES DE SISTEMA ===
        {
          key: 'system_maintenance_mode',
          category: 'system',
          name: 'Modo Manuten√ß√£o',
          description: 'Ativa o modo de manuten√ß√£o do sistema',
          value: 'false',
          type: 'boolean',
          isPublic: true,
          isRequired: true,
          sortOrder: 40,
          metadata: JSON.stringify({
            group: 'system_status',
            icon: 'wrench',
            validation: { type: 'boolean' }
          })
        },
        {
          key: 'system_default_language',
          category: 'system',
          name: 'Idioma Padr√£o',
          description: 'Idioma padr√£o do sistema',
          value: 'pt-BR',
          type: 'string',
          isPublic: true,
          isRequired: true,
          sortOrder: 41,
          metadata: JSON.stringify({
            group: 'localization',
            icon: 'flag',
            validation: { type: 'string', enum: ['pt-BR', 'en-US', 'es-ES'] }
          })
        },

        // === CONFIGURA√á√ïES DE EMAIL ===
        {
          key: 'email_notifications_enabled',
          category: 'email',
          name: 'Notifica√ß√µes por Email',
          description: 'Controla se as notifica√ß√µes por email est√£o ativas',
          value: 'true',
          type: 'boolean',
          isPublic: false,
          isRequired: true,
          sortOrder: 50,
          metadata: JSON.stringify({
            group: 'notifications',
            icon: 'mail',
            validation: { type: 'boolean' }
          })
        },
        {
          key: 'email_from_name',
          category: 'email',
          name: 'Nome do Remetente',
          description: 'Nome exibido nos emails enviados',
          value: 'NeuralContent',
          type: 'string',
          isPublic: false,
          isRequired: true,
          sortOrder: 51,
          metadata: JSON.stringify({
            group: 'email_config',
            icon: 'user',
            validation: { type: 'string', minLength: 2 }
          })
        }
      ];

      // Inserir configura√ß√µes usando SQL direto
      for (const config of configsToInsert) {
        await dataSource.query(`
          INSERT INTO sys_configs (
            config_key, category, name, description, config_value, value_type,
            is_public, is_required, sort_order, metadata, created_at, updated_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
        `, [
          config.key,
          config.category,
          config.name,
          config.description,
          config.value,
          config.type,
          config.isPublic,
          config.isRequired,
          config.sortOrder,
          config.metadata
        ]);
      }

      console.log('‚úÖ Seed de configura√ß√µes do sistema conclu√≠do com sucesso!');
      console.log(`   - Total de configura√ß√µes criadas: ${configsToInsert.length}`);
      console.log('   - Categorias: api, credits, limits, features, system, email');

    } catch (error) {
      console.error('‚ùå Erro ao executar seed de configura√ß√µes:', error);
      throw error;
    }
  }
}
