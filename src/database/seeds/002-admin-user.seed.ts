import { DataSource } from 'typeorm';
import { User } from '../../modules/users/entities/user.entity';
import * as bcrypt from 'bcrypt';

export class AdminUserSeed {
  public async run(dataSource: DataSource): Promise<void> {
    const userRepository = dataSource.getRepository(User);

    // Verificar se j√° existe um usu√°rio admin
    const existingAdmin = await userRepository.findOne({
      where: { email: 'admin@neuralcontent.com' }
    });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Usu√°rio admin j√° existe, pulando cria√ß√£o...');
      return;
    }

    console.log('üîë Criando usu√°rio admin padr√£o...');

    // Hash da senha padr√£o
    const defaultPassword = 'NeuralContent@2025';
    const hashedPassword = await bcrypt.hash(defaultPassword, 10);

    // Criar usu√°rio admin - usando apenas campos que existem na migration
    const adminUser = userRepository.create({
      name: 'Neural Content Admin',
      email: 'admin@neuralcontent.com',
      password_hash: hashedPassword,
      role: 'admin' as const,
      status: 'active' as const,
      email_verified: true,
      phone: '+55 11 99999-9999',
      language: 'pt-BR',
      timezone: 'America/Sao_Paulo',
      preferences: {
        notifications: {
          email: true,
          push: true,
          marketing: false
        },
        theme: 'light'
      },
      login_attempts: 0
    });

    const savedAdmin = await userRepository.save(adminUser);

    console.log('‚úÖ Usu√°rio admin criado com sucesso!');
    console.log(`   - ID: ${savedAdmin.id}`);
    console.log(`   - Email: ${savedAdmin.email}`);
    console.log(`   - Senha padr√£o: ${defaultPassword}`);
    console.log('   ‚ö†Ô∏è  IMPORTANTE: Altere a senha padr√£o ap√≥s o primeiro login!');
  }
}
