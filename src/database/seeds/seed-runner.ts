import { DataSource } from 'typeorm';
import { DefaultPlansSeed } from './001-default-plans.seed';
import { AdminUserSeed } from './002-admin-user.seed';
import { SystemConfigSeed } from './003-system-config.seed';

export class SeedRunner {
  private dataSource: DataSource;
  
  constructor(dataSource: DataSource) {
    this.dataSource = dataSource;
  }

  public async runAllSeeds(): Promise<void> {
    console.log('üå± Iniciando execu√ß√£o de todos os seeds...');
    console.log('=' .repeat(50));

    try {
      // PASSO 1: Executar seed de planos padr√£o
      console.log('\nüìã PASSO 1: Criando planos padr√£o...');
      const plansSeed = new DefaultPlansSeed();
      await plansSeed.run(this.dataSource);

      // PASSO 2: Executar seed do usu√°rio admin
      console.log('\nüë§ PASSO 2: Criando usu√°rio administrador...');
      const adminSeed = new AdminUserSeed();
      await adminSeed.run(this.dataSource);

      // PASSO 3: Executar seed das configura√ß√µes do sistema
      console.log('\n‚öôÔ∏è  PASSO 3: Configurando sistema...');
      const configSeed = new SystemConfigSeed();
      await configSeed.run(this.dataSource);

      console.log('\n' + '=' .repeat(50));
      console.log('‚úÖ TODOS OS SEEDS EXECUTADOS COM SUCESSO!');
      console.log('=' .repeat(50));
      
      console.log('\nüìä RESUMO DA EXECU√á√ÉO:');
      console.log('   ‚úÖ Planos de assinatura criados (Free, Basic, Premium)');
      console.log('   ‚úÖ Usu√°rio administrador criado');
      console.log('   ‚úÖ Configura√ß√µes de sistema definidas');
      
      console.log('\nüîê CREDENCIAIS DE ACESSO:');
      console.log('   Email: admin@neuralcontent.com');
      console.log('   Senha: NeuralContent@2025');
      console.log('   ‚ö†Ô∏è  ALTERE A SENHA AP√ìS O PRIMEIRO LOGIN!');
      
      console.log('\nüöÄ Sistema pronto para uso completo!');

    } catch (error) {
      console.error('\n‚ùå ERRO DURANTE A EXECU√á√ÉO DOS SEEDS:');
      console.error('Error:', error.message);
      
      if (error.stack) {
        console.error('Stack trace:', error.stack);
      }
      
      throw error;
    }
  }

  // M√©todo para executar seeds individualmente
  public async runSeed(seedName: string): Promise<void> {
    console.log(`üå± Executando seed: ${seedName}...`);

    try {
      switch (seedName.toLowerCase()) {
        case 'plans':
        case 'default-plans':
          const plansSeed = new DefaultPlansSeed();
          await plansSeed.run(this.dataSource);
          break;

        case 'admin':
        case 'admin-user':
          const adminSeed = new AdminUserSeed();
          await adminSeed.run(this.dataSource);
          break;

        case 'config':
        case 'system-config':
          const configSeed = new SystemConfigSeed();
          await configSeed.run(this.dataSource);
          break;

        default:
          throw new Error(`Seed '${seedName}' n√£o encontrado. Seeds dispon√≠veis: plans, admin, config`);
      }

      console.log(`‚úÖ Seed '${seedName}' executado com sucesso!`);

    } catch (error) {
      console.error(`‚ùå Erro ao executar seed '${seedName}':`, error.message);
      throw error;
    }
  }

  // M√©todo para listar todos os seeds dispon√≠veis
  public listAvailableSeeds(): string[] {
    return [
      'plans (001-default-plans.seed.ts)',
      'admin (002-admin-user.seed.ts)', 
      'config (003-system-config.seed.ts)'
    ];
  }
}

// Fun√ß√£o principal para execu√ß√£o standalone
export async function runSeeds(dataSource: DataSource, seedName?: string): Promise<void> {
  const runner = new SeedRunner(dataSource);

  if (seedName) {
    await runner.runSeed(seedName);
  } else {
    await runner.runAllSeeds();
  }
}
