import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { INestApplication } from '@nestjs/common';

/**
 * Configura√ß√£o do Swagger/OpenAPI 3.0 para documenta√ß√£o da API
 * 
 * @description Configura√ß√£o profissional do Swagger seguindo padr√µes OpenAPI 3.0
 * @author NeuralContent Team
 * @since 1.0.0
 * 
 * @features
 * - Documenta√ß√£o completa da API
 * - Autentica√ß√£o JWT nos endpoints
 * - Schemas autom√°ticos dos DTOs
 * - Exemplos de request/response
 * - Versionamento da API
 * - Tags organizadas por m√≥dulos
 */
export function setupSwagger(app: INestApplication): void {
  const config = new DocumentBuilder()
    .setTitle('üß† NeuralContent API')
    .setDescription(`
## üéØ API NeuralContent - Documenta√ß√£o Completa

**Backend NestJS** para plataforma de gera√ß√£o de conte√∫do com IA

### üöÄ Funcionalidades Principais:

#### üîê **Autentica√ß√£o & Autoriza√ß√£o**
- Sistema JWT com refresh tokens
- Controle de acesso baseado em roles (RBAC)
- Verifica√ß√£o de email e recupera√ß√£o de senha
- Sess√µes de usu√°rio com rastreamento

#### üë• **Gest√£o de Usu√°rios**
- CRUD completo de usu√°rios
- Perfis personaliz√°veis
- Sistema de permiss√µes granular
- Auditoria de a√ß√µes

#### üí≥ **Sistema de Pagamentos**
- Integra√ß√£o com Stripe e PayPal
- Processamento de webhooks
- Gest√£o de assinaturas
- Hist√≥rico de transa√ß√µes

#### üìã **Planos e Funcionalidades**
- Planos flex√≠veis (B√°sico, Premium, Enterprise)
- Features modulares por plano
- Upgrades e downgrades autom√°ticos
- Controle de limites de uso

#### ü™ô **Sistema de Cr√©ditos**
- Cr√©ditos por uso/consumo
- Transa√ß√µes detalhadas
- Recarga autom√°tica
- Relat√≥rios de consumo

#### üîß **Painel Administrativo**
- Dashboard com m√©tricas em tempo real
- Gest√£o de usu√°rios e permiss√µes
- Relat√≥rios avan√ßados
- Logs e auditoria do sistema

### üîß **Tecnologias Utilizadas:**
- **Framework:** NestJS 11+ com TypeScript
- **Database:** MySQL 8.0 com TypeORM
- **Cache:** Redis
- **Documenta√ß√£o:** Swagger/OpenAPI 3.0
- **Deploy:** PM2 Cluster Mode
- **Testing:** Jest + Supertest

### üåç **Ambientes:**
- **Desenvolvimento:** http://localhost:3001
- **Produ√ß√£o:** https://api.neuralbook.app

### üìö **Padr√µes da API:**
- **REST:** Endpoints padronizados
- **HTTP Status:** C√≥digos sem√¢nticos
- **Validation:** class-validator autom√°tico
- **Error Handling:** Respostas estruturadas
- **Rate Limiting:** Prote√ß√£o contra spam
- **Security:** Headers de seguran√ßa + CORS

### üìä **Monitoramento:**
- Health checks em /health
- M√©tricas de performance
- Logs estruturados
- Error tracking

### üîê **Autentica√ß√£o:**
Para acessar endpoints protegidos, use o header:
\`\`\`
Authorization: Bearer <JWT_TOKEN>
\`\`\`

Obtenha o token atrav√©s do endpoint \`POST /auth/login\`
    `)
    .setVersion('1.0.0')
    .setContact(
      'NeuralContent Team',
      'https://neuralbook.app',
      'contato@neuralbook.app'
    )
    .setLicense(
      'MIT License',
      'https://opensource.org/licenses/MIT'
    )
    .addServer('http://localhost:3001', 'Desenvolvimento')
    .addServer('https://api.neuralbook.app', 'Produ√ß√£o')
    .addBearerAuth(
      {
        type: 'http',
        scheme: 'bearer',
        bearerFormat: 'JWT',
        name: 'JWT',
        description: 'Token JWT para autentica√ß√£o. Obtenha atrav√©s do endpoint POST /auth/login',
        in: 'header',
      },
      'JWT-auth'
    )
    .addApiKey(
      {
        type: 'apiKey',
        name: 'x-api-key',
        in: 'header',
        description: 'API Key para acesso sem autentica√ß√£o JWT (apenas para integra√ß√µes)',
      },
      'API-Key'
    )
    .addTag('üîê Auth', 'Endpoints de autentica√ß√£o e autoriza√ß√£o')
    .addTag('üë• Users', 'Gest√£o de usu√°rios e perfis')
    .addTag('üìã Plans', 'Planos e funcionalidades dispon√≠veis')
    .addTag('üí≥ Payments', 'Processamento de pagamentos e assinaturas')
    .addTag('ü™ô Credits', 'Sistema de cr√©ditos por uso')
    .addTag('üîß Admin', 'Painel administrativo (apenas admins)')
    .addTag('üìä Health', 'Health checks e status do sistema')
    .build();

  const document = SwaggerModule.createDocument(app, config, {
    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,
    deepScanRoutes: true,
  });

  // Customiza√ß√µes adicionais do documento
  (document.info as any)['x-logo'] = {
    url: 'https://neuralbook.app/logo.png',
    altText: 'NeuralContent Logo'
  };

  // Adicionar exemplos globais de responses de erro
  if (!document.components) {
    document.components = {};
  }
  document.components.responses = {
    BadRequest: {
      description: 'Dados de entrada inv√°lidos',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              statusCode: { type: 'number', example: 400 },
              message: { 
                oneOf: [
                  { type: 'string', example: 'Dados inv√°lidos' },
                  { 
                    type: 'array',
                    items: { type: 'string' },
                    example: ['email deve ser um email v√°lido', 'password √© obrigat√≥rio']
                  }
                ]
              },
              error: { type: 'string', example: 'Bad Request' },
              timestamp: { type: 'string', format: 'date-time' },
              path: { type: 'string', example: '/api/v1/auth/login' }
            }
          }
        }
      }
    },
    Unauthorized: {
      description: 'N√£o autorizado - Token inv√°lido ou expirado',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              statusCode: { type: 'number', example: 401 },
              message: { type: 'string', example: 'Token inv√°lido ou expirado' },
              error: { type: 'string', example: 'Unauthorized' },
              timestamp: { type: 'string', format: 'date-time' },
              path: { type: 'string', example: '/api/v1/users/profile' }
            }
          }
        }
      }
    },
    Forbidden: {
      description: 'Acesso negado - Permiss√µes insuficientes',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              statusCode: { type: 'number', example: 403 },
              message: { type: 'string', example: 'Acesso negado - Permiss√µes insuficientes' },
              error: { type: 'string', example: 'Forbidden' },
              timestamp: { type: 'string', format: 'date-time' },
              path: { type: 'string', example: '/api/v1/admin/users' }
            }
          }
        }
      }
    },
    NotFound: {
      description: 'Recurso n√£o encontrado',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              statusCode: { type: 'number', example: 404 },
              message: { type: 'string', example: 'Usu√°rio n√£o encontrado' },
              error: { type: 'string', example: 'Not Found' },
              timestamp: { type: 'string', format: 'date-time' },
              path: { type: 'string', example: '/api/v1/users/123' }
            }
          }
        }
      }
    },
    InternalServerError: {
      description: 'Erro interno do servidor',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              statusCode: { type: 'number', example: 500 },
              message: { type: 'string', example: 'Erro interno do servidor' },
              error: { type: 'string', example: 'Internal Server Error' },
              timestamp: { type: 'string', format: 'date-time' },
              path: { type: 'string', example: '/api/v1/users' }
            }
          }
        }
      }
    }
  };

  // Configurar o Swagger UI com customiza√ß√µes
  SwaggerModule.setup('api/docs', app, document, {
    swaggerOptions: {
      persistAuthorization: true, // Manter autoriza√ß√£o entre reloads
      tagsSorter: 'alpha', // Ordenar tags alfabeticamente
      operationsSorter: 'alpha', // Ordenar opera√ß√µes alfabeticamente
      docExpansion: 'none', // N√£o expandir por padr√£o
      filter: true, // Habilitar filtro de busca
      showRequestDuration: true, // Mostrar tempo de resposta
      tryItOutEnabled: true, // Habilitar "Try it out"
      displayRequestDuration: true,
      defaultModelsExpandDepth: 3,
      defaultModelExpandDepth: 3,
    },
    customSiteTitle: 'NeuralContent API Documentation',
    customfavIcon: 'https://neuralbook.app/favicon.ico',
    customCss: `
      .swagger-ui .topbar { display: none; }
      .swagger-ui .info .title { color: #1f2937; }
      .swagger-ui .info .description { color: #4b5563; }
      .swagger-ui .opblock.opblock-post { border-color: #10b981; }
      .swagger-ui .opblock.opblock-get { border-color: #3b82f6; }
      .swagger-ui .opblock.opblock-put { border-color: #f59e0b; }
      .swagger-ui .opblock.opblock-delete { border-color: #ef4444; }
      .swagger-ui .info .description p { margin: 0.5rem 0; }
      .swagger-ui .info .description h3 { color: #1f2937; margin: 1rem 0 0.5rem 0; }
      .swagger-ui .info .description h4 { color: #374151; margin: 0.75rem 0 0.25rem 0; }
      .swagger-ui .info .description ul { margin: 0.25rem 0; }
      .swagger-ui .info .description code { 
        background: #f3f4f6; 
        padding: 0.125rem 0.25rem; 
        border-radius: 0.25rem;
        font-size: 0.875rem;
      }
    `,
  });

  // Rota para download do OpenAPI JSON
  SwaggerModule.setup('api/docs/json', app, document);
}

/**
 * Configura√ß√£o do Swagger para desenvolvimento
 */
export function setupSwaggerDev(app: INestApplication): void {
  console.log('üîó Swagger Documentation available at:');
  console.log('üìö Interactive Docs: http://localhost:3001/api/docs');
  console.log('üìÑ OpenAPI JSON: http://localhost:3001/api/docs/json');
  console.log('üìã OpenAPI YAML: http://localhost:3001/api/docs-yaml');
}
