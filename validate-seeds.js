#!/usr/bin/env node

/**
 * Script de Valida√ß√£o Completa do Sistema de Seeds
 * 
 * Este script verifica:
 * 1. Conex√£o com o banco de dados
 * 2. Exist√™ncia das tabelas necess√°rias
 * 3. Estrutura das entidades
 * 4. Execu√ß√£o dos seeds
 * 5. Integridade dos dados
 */

const { DataSource } = require('typeorm');
const path = require('path');
const fs = require('fs');

// Configura√ß√£o do banco de dados
const dataSource = new DataSource({
    type: 'mysql',
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT) || 3306,
    username: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'neuralcontent',
    synchronize: false,
    logging: false,
    entities: ['dist/src/**/*.entity.js'],
});

async function validateDatabase() {
    console.log('üîç Iniciando valida√ß√£o completa do sistema de seeds...\n');
    
    try {
        // 1. Testar conex√£o
        console.log('1Ô∏è‚É£ Testando conex√£o com o banco de dados...');
        await dataSource.initialize();
        console.log('‚úÖ Conex√£o estabelecida com sucesso!\n');

        // 2. Verificar tabelas essenciais
        console.log('2Ô∏è‚É£ Verificando exist√™ncia das tabelas...');
        const requiredTables = [
            'users',
            'plans', 
            'plan_features',
            'credit_balances',
            'credit_transactions',
            'user_sessions',
            'system_config',
            'payments',
            'audit_logs'
        ];

        for (const table of requiredTables) {
            const result = await dataSource.query(
                `SELECT COUNT(*) as count FROM information_schema.tables 
                 WHERE table_schema = ? AND table_name = ?`,
                [process.env.DB_NAME || 'neuralcontent', table]
            );
            
            if (result[0].count > 0) {
                console.log(`  ‚úÖ Tabela '${table}' existe`);
            } else {
                console.log(`  ‚ùå Tabela '${table}' n√£o encontrada`);
                throw new Error(`Tabela obrigat√≥ria '${table}' n√£o existe`);
            }
        }
        console.log('‚úÖ Todas as tabelas obrigat√≥rias existem!\n');

        // 3. Verificar dados dos seeds
        console.log('3Ô∏è‚É£ Verificando dados inseridos pelos seeds...');
        
        // Verificar usu√°rios
        const userCount = await dataSource.query('SELECT COUNT(*) as count FROM users');
        console.log(`  üë• Usu√°rios encontrados: ${userCount[0].count}`);
        
        if (userCount[0].count >= 3) {
            console.log('  ‚úÖ Seeds de usu√°rios executados corretamente');
        } else {
            console.log('  ‚ö†Ô∏è Seeds de usu√°rios podem n√£o ter sido executados');
        }

        // Verificar planos
        const planCount = await dataSource.query('SELECT COUNT(*) as count FROM plans');
        console.log(`  üìã Planos encontrados: ${planCount[0].count}`);
        
        if (planCount[0].count >= 4) {
            console.log('  ‚úÖ Seeds de planos executados corretamente');
        } else {
            console.log('  ‚ö†Ô∏è Seeds de planos podem n√£o ter sido executados');
        }

        // Verificar features
        const featureCount = await dataSource.query('SELECT COUNT(*) as count FROM plan_features');
        console.log(`  ‚öôÔ∏è Features encontradas: ${featureCount[0].count}`);
        
        if (featureCount[0].count >= 16) {
            console.log('  ‚úÖ Seeds de features executados corretamente');
        } else {
            console.log('  ‚ö†Ô∏è Seeds de features podem n√£o ter sido executados');
        }

        // Verificar saldos de cr√©dito
        const creditCount = await dataSource.query('SELECT COUNT(*) as count FROM credit_balances');
        console.log(`  üí∞ Saldos de cr√©dito encontrados: ${creditCount[0].count}`);
        
        if (creditCount[0].count >= 3) {
            console.log('  ‚úÖ Seeds de saldos executados corretamente');
        } else {
            console.log('  ‚ö†Ô∏è Seeds de saldos podem n√£o ter sido executados');
        }

        // Verificar configura√ß√µes
        const configCount = await dataSource.query('SELECT COUNT(*) as count FROM system_config');
        console.log(`  üîß Configura√ß√µes encontradas: ${configCount[0].count}`);
        
        if (configCount[0].count >= 10) {
            console.log('  ‚úÖ Seeds de configura√ß√µes executados corretamente');
        } else {
            console.log('  ‚ö†Ô∏è Seeds de configura√ß√µes podem n√£o ter sido executados');
        }

        console.log('\n4Ô∏è‚É£ Verificando integridade dos dados...');

        // Verificar relacionamentos
        const plansWithFeatures = await dataSource.query(`
            SELECT p.name, COUNT(pf.id) as feature_count
            FROM plans p
            LEFT JOIN plan_features pf ON p.id = pf.plan_id
            GROUP BY p.id, p.name
        `);

        console.log('  üìä Planos e suas features:');
        plansWithFeatures.forEach(plan => {
            console.log(`    ${plan.name}: ${plan.feature_count} features`);
        });

        // Verificar usu√°rios com saldos
        const usersWithBalance = await dataSource.query(`
            SELECT u.email, cb.balance
            FROM users u
            LEFT JOIN credit_balances cb ON u.id = cb.user_id
            WHERE cb.balance IS NOT NULL
        `);

        console.log('\n  üí≥ Usu√°rios com saldo de cr√©ditos:');
        usersWithBalance.forEach(user => {
            console.log(`    ${user.email}: ${user.balance} cr√©ditos`);
        });

        console.log('\n5Ô∏è‚É£ Verificando arquivos de seed...');
        
        const seedsDir = path.join(__dirname, 'src', 'database', 'seeds');
        const requiredSeeds = [
            'seed-runner.ts',
            'run-seeds.ts',
            '001-users.seed.ts',
            '002-plans.seed.ts',
            '003-plan-features.seed.ts',
            '004-credit-balances.seed.ts',
            '005-user-sessions.seed.ts',
            '006-system-config.seed.ts'
        ];

        for (const seedFile of requiredSeeds) {
            const seedPath = path.join(seedsDir, seedFile);
            if (fs.existsSync(seedPath)) {
                console.log(`  ‚úÖ Arquivo '${seedFile}' existe`);
            } else {
                console.log(`  ‚ùå Arquivo '${seedFile}' n√£o encontrado`);
            }
        }

        console.log('\n==========================================');
        console.log('üéâ VALIDA√á√ÉO COMPLETA CONCLU√çDA!');
        console.log('==========================================');
        
        console.log('\nüìä RESUMO DA VALIDA√á√ÉO:');
        console.log('------------------------');
        console.log(`‚úÖ Conex√£o com banco: OK`);
        console.log(`‚úÖ Tabelas obrigat√≥rias: ${requiredTables.length}/${requiredTables.length}`);
        console.log(`‚úÖ Usu√°rios: ${userCount[0].count}`);
        console.log(`‚úÖ Planos: ${planCount[0].count}`);
        console.log(`‚úÖ Features: ${featureCount[0].count}`);
        console.log(`‚úÖ Saldos: ${creditCount[0].count}`);
        console.log(`‚úÖ Configura√ß√µes: ${configCount[0].count}`);
        
        console.log('\nüöÄ O sistema est√° pronto para uso!');
        console.log('\nüîë Para executar os seeds:');
        console.log('   npm run db:seed');
        
        console.log('\nüìñ Para mais informa√ß√µes:');
        console.log('   Consulte o README.md em src/database/seeds/');

    } catch (error) {
        console.error('\n‚ùå ERRO NA VALIDA√á√ÉO:', error.message);
        console.error('\nüîß Poss√≠veis solu√ß√µes:');
        console.error('1. Verificar se o MySQL est√° rodando');
        console.error('2. Verificar as vari√°veis de ambiente');
        console.error('3. Executar as migrations: npm run migration:run');
        console.error('4. Compilar o projeto: npm run build');
        process.exit(1);
    } finally {
        if (dataSource.isInitialized) {
            await dataSource.destroy();
        }
    }
}

// Executar valida√ß√£o
if (require.main === module) {
    validateDatabase();
}

module.exports = { validateDatabase };
