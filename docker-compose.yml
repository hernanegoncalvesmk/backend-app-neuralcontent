# ==============================================
# NEURALCONTENT - DOCKER COMPOSE PRODUCTION
# ==============================================
# Orquestração completa dos serviços para produção
# Redis + MySQL + API + Nginx Load Balancer

version: '3.8'

networks:
  neuralcontent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  uploads-data:
    driver: local

services:
  # ==============================================
  # DATABASE - MySQL 8.0
  # ==============================================
  mysql:
    image: mysql:8.0
    container_name: neuralcontent-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-neural_root_2024!}
      MYSQL_DATABASE: ${DB_NAME:-neuralcontent_prod}
      MYSQL_USER: ${DB_USER:-neural_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-Neural@2024!Prod}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
      - ./docker/mysql/conf:/etc/mysql/conf.d
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.10
    command: >
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --sql-mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
      --max-connections=1000
      --innodb-buffer-pool-size=512M
      --slow-query-log=1
      --long-query-time=2
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-neural_root_2024!}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ==============================================
  # CACHE - Redis 7
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: neuralcontent-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-Redis@Neural2024!}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.20
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-Redis@Neural2024!}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==============================================
  # API - NeuralContent Backend
  # ==============================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: neuralcontent-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3001:3001"
    volumes:
      - app-logs:/app/logs
      - uploads-data:/app/uploads
      - ./docker/api/config:/app/config
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.30
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ==============================================
  # LOAD BALANCER - Nginx
  # ==============================================
  nginx:
    image: nginx:alpine
    container_name: neuralcontent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./docker/nginx/logs:/var/log/nginx
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.40
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==============================================
  # MONITORING - Prometheus (Opcional)
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: neuralcontent-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/data:/prometheus
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.50
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # ==============================================
  # METRICS - Grafana (Opcional)
  # ==============================================
  grafana:
    image: grafana/grafana:latest
    container_name: neuralcontent-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - ./docker/grafana/data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      neuralcontent-network:
        ipv4_address: 172.20.0.60
    depends_on:
      - prometheus
    profiles:
      - monitoring
